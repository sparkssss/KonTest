import pickle
import random
    
from bigtree import Node, tree_to_dot, print_tree, tree_to_nested_dict, nested_dict_to_tree, levelordergroup_iter

#Initial Code Block for extracting the nodes from the generated trees. Running it will generate a random set of nodes. Set used is in CONFIG.txt as selNodes. 

import ast

configText = 'CONFIG.txt'

fConfig = open(configText, "r")

while True:
    
    line = fConfig.readline()
    
    if not line:
        break
    
    words = line[:-1]
        
    if words.startswith('chosenDomain'):
        
        intWordInd = words.find('\'')
        
        intWords = words[intWordInd:]
        
        resWords = intWords.split(',')
        
        newResWords = []
        
        for resWord in resWords:
            
            start = resWord.find('\'') + 1
            resWord = resWord[start:]
            end = resWord.find('\'')
            resWord = resWord[:end]
            
            newResWords.append(resWord)
            
        resWords = newResWords
        
        chosenDomain = resWords[0]
        
    if words.startswith('initList'):
        
        intWordInd = words.find('\'')
        
        intWords = words[intWordInd:]
        
        resWords = intWords.split(',')
        
        newResWords = []
        
        for resWord in resWords:
            
            start = resWord.find('\'') + 1
            resWord = resWord[start:]
            end = resWord.find('\'')
            resWord = resWord[:end]
            
            newResWords.append(resWord)
            
        resWords = newResWords
        
        initList = resWords
        
fConfig.close()

###########################################################################################
#Retrieves the KGs generated by KonTest for the intial nodes chosen
###########################################################################################

selNodes = []

megaRoot = Node("WorldRoot")

for countryNode in initList:

    with open(countryNode + '.pkl', 'rb') as file:

            # Call load method to deserialze
            myvar = pickle.load(file)

            root = nested_dict_to_tree(myvar)

            root.parent = megaRoot

for x in range(100):
    
    selGraph = random.choice(initList)
    
    with open('/knowledgeGraphs/' + selGraph + '.pkl', 'rb') as file:
      
        # Call load method to deserialze
        myvar = pickle.load(file)

        root = nested_dict_to_tree(myvar)
    
    nodeList = [[node.name for node in node_group] for node_group in levelordergroup_iter(root)]
    
    lastLevelNodeList = nodeList[-1]
    
    lastLevelNodeList = list(set(lastLevelNodeList))
        
    selNode = random.choice(lastLevelNodeList)
    
    selNodes.append(selNode)
        

selNodes = list(set(selNodes))

parent = root.parent


from bigtree import find_names

foundNodes = []

for elemNode in selNodes:

    findRes = find_names(megaRoot, elemNode)

    parentNode = findRes[0]

    nodePath = []

    while (parentNode!=None):

        nodePath.append(parentNode.name)
        parentNode = parentNode.parent
        
    nodePath = nodePath[:-1]
    foundNodes.append(nodePath)
    
print(foundNodes)
